import{_ as o}from"./ShowCode-30e77455.js";import{o as c,c as t,f as a,a as e,e as i,s as l}from"./index-974d2cc0.js";const n="/java/medias/boucle.png",s=e("p",null,"Une boucle sert à répéter une action.",-1),u=e("h2",null,"La boucle while",-1),r=e("p",null,[i("La boucle "),e("code",null,"while"),i(" s'écrit comme ceci :")],-1),d=l('<p> La variable <code>condition</code> doit être de type <code>boolean</code>. Si la condition est vraie, on entre dans la boucle, le code s&#39;exécute. Quand il arrive à la fin, il vérifie à nouveau la condition. Si elle est toujours vraie, il recommence, sinon, il sort de la boucle. </p><img src="'+n+'" alt="Boucle"><p> Il faut donc s&#39;assurer que le code qui s&#39;exécute dans la boucle influence la condition car sinon, la condition sera toujours vraie et la boucle ne s&#39;arrêtera jamais. </p><h2>La boucle do ... while</h2><p> La boucle <code>do while</code> fonctionne de la même façon que la boucle <code>while</code>, sauf qu&#39;elle vérifie la condition à la fin. Ce qui veut dire qu&#39;elle s&#39;exécute toujours au moins une fois. </p>',5),p=l("<p> Remarquez bien la présence du point-virgule à la fin qui est obligatoire. </p><p> Il est déconseillé de l&#39;utiliser<sup>(?)</sup>, la boucle <code>while</code> classique est à privilégier. </p><h2>La boucle for</h2><p> La boucle <code>for</code> s&#39;exécute tant qu&#39;une condition est vraie, comme la boucle <code>while</code>, sauf qu&#39;elle prend deux autres paramètres : l&#39;initialisation d&#39;une variable et une action qui sera exécutée à la fin de chaque itération. </p>",4),f=e("p",null,"(Cette boucle va se répeter 10 fois.)",-1),j={__name:"Boucles",setup(v){return(_,m)=>(c(),t("div",null,[s,u,r,a(o,{file:"/java/code/while.java",lang:"java"}),d,a(o,{file:"/java/code/do-while.java",lang:"java"}),p,a(o,{file:"/java/code/for.java",lang:"java"}),f]))}};export{j as default};

import{_ as a}from"./ShowCode-30e77455.js";import{_ as c,o as d,c as r,f as e,s as t}from"./index-974d2cc0.js";const s=t("<p data-v-a2cc0e80> Les variables servent à mémoriser des données dans la RAM pour pouvoir les réutiliser plus tard. </p><h2 data-v-a2cc0e80>Les types de variables</h2><table data-v-a2cc0e80><thead data-v-a2cc0e80><tr data-v-a2cc0e80><th data-v-a2cc0e80>Nom</th><th data-v-a2cc0e80>Taille</th><th data-v-a2cc0e80>Remarque</th></tr></thead><tbody data-v-a2cc0e80><tr data-v-a2cc0e80><td data-v-a2cc0e80>boolean</td><td data-v-a2cc0e80>1 bit</td><td data-v-a2cc0e80>Deux possibilités : true ou false</td></tr><tr data-v-a2cc0e80><td data-v-a2cc0e80>byte</td><td data-v-a2cc0e80>1 octet</td><td data-v-a2cc0e80>Entre -128 et 127</td></tr><tr data-v-a2cc0e80><td data-v-a2cc0e80>short</td><td data-v-a2cc0e80>2 octets</td><td data-v-a2cc0e80>Entre -32768 et 32767</td></tr><tr data-v-a2cc0e80><td data-v-a2cc0e80>int</td><td data-v-a2cc0e80>4 octets</td><td data-v-a2cc0e80>Entre -2&#39;147&#39;483&#39;648 et 2&#39;147&#39;483&#39;647</td></tr><tr data-v-a2cc0e80><td data-v-a2cc0e80>long</td><td data-v-a2cc0e80>8 octets</td><td data-v-a2cc0e80>Entre -9&#39;223&#39;372&#39;036&#39;854&#39;775&#39;808 et 9&#39;223&#39;372&#39;036&#39;854&#39;775&#39;807</td></tr><tr data-v-a2cc0e80><td data-v-a2cc0e80>float</td><td data-v-a2cc0e80>4 octets</td><td data-v-a2cc0e80>Nombre à virgule, précision simple</td></tr><tr data-v-a2cc0e80><td data-v-a2cc0e80>double</td><td data-v-a2cc0e80>8 octets</td><td data-v-a2cc0e80>Nombre à virgule, précision double</td></tr><tr data-v-a2cc0e80><td data-v-a2cc0e80>char</td><td data-v-a2cc0e80>2 octets</td><td data-v-a2cc0e80>Un seul caractère</td></tr><tr data-v-a2cc0e80><td data-v-a2cc0e80>String</td><td data-v-a2cc0e80>Taille variable</td><td data-v-a2cc0e80>Une chaîne de caractères</td></tr></tbody></table><h2 data-v-a2cc0e80>Utilisation</h2>",4),l=t('<span data-v-a2cc0e80><b data-v-a2cc0e80>type</b> : un des types présentés au dessus, à choisir en fonction du besoin.</span><br data-v-a2cc0e80><span data-v-a2cc0e80><b data-v-a2cc0e80>nomVariable</b> : le nom qu&#39;on utilisera par la suite pour faire appelle à notre variable, sans espace ni caractères spéciaux, le plus souvent en <a href="https://fr.wikipedia.org/wiki/Camel_case" target="_blank" data-v-a2cc0e80>Camel Case</a>.</span><br data-v-a2cc0e80><span data-v-a2cc0e80><b data-v-a2cc0e80>= 0</b> : Sert à initialiser directement la variable avec une valeur. C&#39;est facultatif. Si on ne le met pas, la variable vaut <code data-v-a2cc0e80>null</code> et ne peut pas être utilisée dans des calculs.</span><h2 data-v-a2cc0e80>Exemples</h2>',6),i=t("<h2 data-v-a2cc0e80>Remarques</h2><ul data-v-a2cc0e80><li data-v-a2cc0e80> Dans un nombre à virgule, on utilise toujours un point et non pas une virgule. Exemple : <code data-v-a2cc0e80>2.5</code></li><li data-v-a2cc0e80> Pour le type <code data-v-a2cc0e80>char</code>, on écrit le caractère entre apostrophes. Exemple : <code data-v-a2cc0e80>&#39;a&#39;</code></li><li data-v-a2cc0e80> Pour le type <code data-v-a2cc0e80>String</code> (attention à la majuscule), on écrit les caractères entre guillemets. Exemple : <code data-v-a2cc0e80>&quot;Hello world!&quot;</code></li></ul>",2),o={__name:"Variables",setup(v){return(n,u)=>(d(),r("div",null,[s,e(a,{raw:"type nomVariable = 0;",lang:"java"}),l,e(a,{raw:`int maVariable; // crée une variable avec le nom maVariable
maVariable = 0; // initialise la variable à 0`,lang:"java"}),e(a,{raw:"int maVariable = 0; // crée et initialise la variable sur la même ligne",lang:"java"}),i]))}},m=c(o,[["__scopeId","data-v-a2cc0e80"]]);export{m as default};

import{_ as l}from"./ShowCode-9918dfa0.js";import{o as e,c as o,e as t,a,d as n}from"./index-24345784.js";const r=a("h2",null,"Changer la valeur d'une variable",-1),u=a("p",null,[n(" On utilise le signe "),a("code",null,"="),n(" pour donner une nouvelle valeur à une variable. ")],-1),s=a("h2",null,"Effectuer un calcul",-1),d=a("p",null,"Il existe 5 opérations de bases :",-1),i={class:"mx-auto"},_=a("thead",null,[a("tr",null,[a("th",null,"Symbole"),a("th",null,"Nom"),a("th",null,"Exemple"),a("th",null,"Remarque")])],-1),c=a("td",null,"+",-1),m=a("td",null,"Addition",-1),h=a("td",null,null,-1),v=a("td",null,"-",-1),V=a("td",null,"Soustraction",-1),p=a("td",null,null,-1),g=a("td",null,"*",-1),j=a("td",null,"Multiplication",-1),w=a("td",null,null,-1),b=a("td",null,"/",-1),f=a("td",null,"Division",-1),x=a("td",null,[n(" Si les deux nombres sont des entiers ("),a("code",null,"byte"),n(", "),a("code",null,"short"),n(", "),a("code",null,"int"),n(" ou "),a("code",null,"long"),n("), alors le résultat sera aussi un nombre entier (arrondi inférieur). ")],-1),y=a("td",null,"%",-1),A=a("td",null,"Modulo",-1),E=a("td",null,"Renvoie le reste de la division.",-1),N=a("h2",null,"Effectuer un calcul complexe",-1),S=a("p",null,"Vous pouvez mettre plus d'un opérateur par ligne :",-1),B=a("p",null," Attention cependant à la priorité des opérations. Vous pouvez mettre des parenthèses comme en mathématique. ",-1),R=a("h2",null,"Raccourci de programmation",-1),k=a("p",null," C'est bien connu, les programmeurs sont flemmards. Il existe donc des écritures raccourcies pour certaines opérations : ",-1),q={class:"mx-auto"},z=a("thead",null,[a("tr",null,[a("th",null,"Symbole"),a("th",null,"Avant"),a("th",null,"Après")])],-1),C=a("td",null,"+=",-1),I=a("td",null,"-=",-1),M=a("td",null,"*=",-1),O=a("td",null,"/=",-1),D=a("td",null,"%=",-1),T=a("td",null,"++",-1),$=a("td",null,"--",-1),L={__name:"Operateurs",setup(F){return(G,H)=>(e(),o("div",null,[r,u,t(l,{raw:"maVariable = 5;",lang:"java"}),s,d,a("table",i,[_,a("tbody",null,[a("tr",null,[c,m,a("td",null,[t(l,{raw:"maVar = 3 + 4; // maVar vaut 7",lang:"java"})]),h]),a("tr",null,[v,V,a("td",null,[t(l,{raw:"maVar = 10 - 4; // maVar vaut 6",lang:"java"})]),p]),a("tr",null,[g,j,a("td",null,[t(l,{raw:"maVar = 3 * 3; // maVar vaut 9",lang:"java"})]),w]),a("tr",null,[b,f,a("td",null,[t(l,{raw:`maVar = 20 / 4; // maVar vaut 5
maVar = 20 / 3; // maVar vaut 6`,lang:"java"})]),x]),a("tr",null,[y,A,a("td",null,[t(l,{raw:"maVar = 42 % 10; // maVar vaut 2",lang:"java"})]),E])])]),N,S,t(l,{raw:"maVar = 2 + 3 + 4; // maVar vaut 9",lang:"java"}),B,t(l,{raw:`maVar = 2 + 3 * 5; // maVar vaut 17
maVar = (2 + 3) * 5; // maVar vaut 25`,lang:"java"}),R,k,a("table",q,[z,a("tbody",null,[a("tr",null,[C,a("td",null,[t(l,{raw:"maVar = maVar + 10;",lang:"java"})]),a("td",null,[t(l,{raw:"maVar += 10;",lang:"java"})])]),a("tr",null,[I,a("td",null,[t(l,{raw:"maVar = maVar - 10;",lang:"java"})]),a("td",null,[t(l,{raw:"maVar -= 10;",lang:"java"})])]),a("tr",null,[M,a("td",null,[t(l,{raw:"maVar = maVar * 2;",lang:"java"})]),a("td",null,[t(l,{raw:"maVar *= 2;",lang:"java"})])]),a("tr",null,[O,a("td",null,[t(l,{raw:"maVar = maVar / 2;",lang:"java"})]),a("td",null,[t(l,{raw:"maVar /= 2;",lang:"java"})])]),a("tr",null,[D,a("td",null,[t(l,{raw:"maVar = maVar % 5;",lang:"java"})]),a("td",null,[t(l,{raw:"maVar %= 5;",lang:"java"})])]),a("tr",null,[T,a("td",null,[t(l,{raw:"maVar += 1;",lang:"java"})]),a("td",null,[t(l,{raw:"maVar++;",lang:"java"})])]),a("tr",null,[$,a("td",null,[t(l,{raw:"maVar -= 1;",lang:"java"})]),a("td",null,[t(l,{raw:"maVar--;",lang:"java"})])])])])]))}};export{L as default};

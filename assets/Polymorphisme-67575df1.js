import{_ as t}from"./ShowCode-30e77455.js";import{r as a,o as r,c as l,a as o,e,f as s,w as p,s as c}from"./index-974d2cc0.js";const i=c("<p> Le polymorphisme est un terme chelou et barbare mais qui repr√©sente en fait quelque chose d&#39;assez simple. </p><p> Nous avons d√©j√† vu l&#39;h√©ritage. Il est bien √©videmment possible de cr√©er des tableaux d&#39;objets. Par exemple, des tableaux de <code>Personne</code>. Mais si nous avons plusieurs classes enfants qui h√©ritent de <code>Personne</code>, par exemple <code>Apprenti</code>, <code>Enseignant</code> et <code>Formateur</code>, nous serions coinc√©s. </p><p> C&#39;est √† cela que sert le polymorphisme. Il permet √† un objet d&#39;une classe parente de contenir un objet enfant, et vous n&#39;avez rien besoin de modifier √† vos classes pour cela. </p>",3),u=o("p",null,[e(" Vous voyez que l'on peut mettre un objet de classe "),o("code",null,"Apprenti"),e(" dans un objet de type "),o("code",null,"Personne"),e(". Attention cependant car l'inverse n'est pas possible. Vous pouvez essayer par vous-m√™me. üòâ ")],-1),b={__name:"Polymorphisme",setup(d){return(m,_)=>{const n=a("router-link");return r(),l("div",null,[i,o("p",null,[e(" Pour l'exemple, reprenons le m√™me projet que pour "),s(n,{to:"/poo/heritage"},{default:p(()=>[e("l'h√©ritage")]),_:1}),e(". Dans la classe principale : ")]),s(t,{file:"/poo/code/polymorphisme.java",lang:"java"}),u])}}};export{b as default};

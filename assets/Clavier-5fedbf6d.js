import{_ as t}from"./ShowCode-dd9392b9.js";import{o as a,c as s,e as l,a as e,d as n,B as o}from"./index-01455bc6.js";const c=e("p",null," Pour qu'on puisse interagir avec notre programme, le plus simple est d'utiliser le clavier pour écrire. ",-1),r=e("h2",null,"La classe Scanner",-1),u=e("p",null,[n(" Pour cela, il existe la classe "),e("code",null,"Scanner"),n(". Elle permet de lire ce qu'on a écrit dans la console. ")],-1),i=e("p",null," Avant de l'utiliser, il faut l'importer. Placer ceci en haut du fichier, après le package : ",-1),d=e("p",null," Normalement, si vous ne le mettez pas, NetBeans vous proposera de le mettre lui-même quand vous l'utiliserez. ",-1),p=e("h2",null,"Instanciation",-1),m=e("p",null,[n(" Pour l'utiliser, nous devons écrire ceci au début de la fonction "),e("code",null,"main"),n(" : ")],-1),_=o('<span><b>Scanner</b> : pour l&#39;instant, voyez-vous ça comme un nouveau type de variable. On crée une variable de type Scanner.</span><br><span><b>sc</b> : le nom de votre Scanner, appelez-le comme vous souhaitez.</span><br><span><b>= new Scanner(System.in)</b> : un truc qui vous semble bizarre pour l&#39;instant. Vous comprendrez immédiatement quand j&#39;aborderai la <span title="Programmation orientée objet" class="cursor-help">POO</span>.</span><h2>Utilisation</h2><p> Lorsque vous écrivez une des fonctions ci-dessous, le programme se met en pause et attend que vous entriez quelque chose : </p>',7),h={class:"mx-auto"},v=e("thead",null,[e("tr",null,[e("th",null,"Fonction"),e("th",null,"Retourne"),e("th",null,"Exemple")])],-1),b=e("td",null,"sc.nextByte()",-1),x=e("td",null,[e("code",null,"byte")],-1),g=e("td",null,"sc.nextShort()",-1),j=e("td",null,[e("code",null,"short")],-1),f=e("td",null,"sc.nextInt()",-1),y=e("td",null,[e("code",null,"int")],-1),q=e("td",null,"sc.nextLong()",-1),S=e("td",null,[e("code",null,"long")],-1),V=e("td",null,"sc.nextFloat()",-1),z=e("td",null,[e("code",null,"float")],-1),w=e("td",null,"sc.nextDouble()",-1),L=e("td",null,[e("code",null,"double")],-1),N=e("td",null,"sc.nextLine()",-1),E=e("td",null,[e("code",null,"String")],-1),I=e("p",null,[n(" Attention donc à ce que pourrait écrire l'utilisateur. par exemple, s'il écrit "),e("code",null,"3.5"),n(" dans un "),e("code",null,"nextInt()"),n(", votre programme plantera car on ne peut pas stocker de nombre à virgule dans un "),e("code",null,"int"),n(". ")],-1),B=e("h2",null,"Le bloc try catch",-1),P=e("p",null," Pour pallier à ce problème, nous pouvons utiliser les exceptions. Les exceptions permettent d'exécuter un autre bout de code si le premier plante. Elles se présentent comme suit : ",-1),k=o("<p> En entrant dans le <code>try</code>, le code se déroule normalement. Si le <code>try</code> se passe bien, le <code>catch</code> n&#39;est pas exécuté. Mais si le <code>try</code> plante, alors nous exécutons ce qu&#39;il y a dans le <code>catch</code>. N&#39;utiliser le bloc <code>try catch</code> seulement là où il est nécessaire, inutile de mettre tout votre programme dans un <code>try catch</code>. </p><p> En paramètre, dans le <code>catch</code>, nous avons <code>NomDeLException</code>. Il s&#39;agit du nom de l&#39;exception. Indiquez ici le nom de l&#39;exception à intercepter afin qu&#39;elles ne soient pas toutes ignorées. </p><p> Voici un bout de code qui l&#39;utilise pour empêcher notre utilisateur d&#39;entrer n&#39;importe quoi : </p>",3),F=e("ul",null,[e("li",null,[n(" Voyez qu'on a utilisé l'exception : "),e("code",null,"NumberFormatException"),n(". ")]),e("li",null,[e("code",null,"Integer.parseInt(line)"),n(" prend en paramètre un texte "),e("code",null,"String"),n(" et renvoie un int si le "),e("code",null,"String"),n(" ne contient que des chiffres. Sinon, il appelle le bloc "),e("code",null,"catch"),n(". ")])],-1),R={__name:"Clavier",setup(D){return(O,A)=>(a(),s("div",null,[c,r,u,i,l(t,{file:"/java/code/import-scanner.java",lang:"java"}),d,p,m,l(t,{file:"/java/code/new-scanner.java",lang:"java"}),_,e("table",h,[v,e("tbody",null,[e("tr",null,[b,x,e("td",null,[l(t,{raw:"byte maVar = sc.nextByte();",lang:"java"})])]),e("tr",null,[g,j,e("td",null,[l(t,{raw:"short maVar = sc.nextShort();",lang:"java"})])]),e("tr",null,[f,y,e("td",null,[l(t,{raw:"int maVar = sc.nextInt();",lang:"java"})])]),e("tr",null,[q,S,e("td",null,[l(t,{raw:"long maVar = sc.nextLong();",lang:"java"})])]),e("tr",null,[V,z,e("td",null,[l(t,{raw:"float maVar = sc.nextFloat();",lang:"java"})])]),e("tr",null,[w,L,e("td",null,[l(t,{raw:"double maVar = sc.nextDouble();",lang:"java"})])]),e("tr",null,[N,E,e("td",null,[l(t,{raw:"String maVar = sc.nextLine();",lang:"java"})])])])]),I,B,P,l(t,{file:"/java/code/try-catch.java",lang:"java"}),k,l(t,{file:"/java/code/programme-saisie-nombres.java",lang:"java"}),F]))}};export{R as default};

import{_ as a}from"./ShowCode-30e77455.js";import{o as t,c as o,f as s,a as e,e as n}from"./index-974d2cc0.js";const i=e("p",null," Une interface ressemble beaucoup à une classe abstraite, mais avec une grosse différence : une classe peut utiliser plusieurs interfaces. ",-1),c=e("p",null,"Déclaration d'une interface :",-1),l=e("p",null,"Utilisation d'une interface dans une classe :",-1),r=e("p",null," Cas pratique : vous voulez que certaines de vos classes puissent afficher une description d'elles-mêmes. ",-1),u=e("p",null,[n(" On crée donc une classe abstraite "),e("code",null,"Description"),n(" par exemple : ")],-1),p=e("p",null," Et dans toutes nos classe qui doivent pouvoir afficher une description, on implémente l'interface. ",-1),d=e("p",null,[n(" On peut ainsi faire des tableaux de type "),e("code",null,"Description"),n(" et boucler dessus pour afficher toutes les descriptions. ")],-1),j={__name:"Interfaces",setup(f){return(_,v)=>(t(),o("div",null,[i,c,s(a,{file:"/poo/code/interfaces0.java",lang:"java"}),l,s(a,{file:"/poo/code/interfaces1.java",lang:"java"}),r,u,s(a,{file:"/poo/code/interfaces2.java",lang:"java"}),p,s(a,{file:"/poo/code/interfaces3.java",lang:"java"}),s(a,{file:"/poo/code/interfaces4.java",lang:"java"}),d]))}};export{j as default};

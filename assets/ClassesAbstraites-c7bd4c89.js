import{_ as s}from"./ShowCode-9918dfa0.js";import{o as c,c as o,e as a,a as e,B as l,d as t}from"./index-24345784.js";const r=e("p",null," Une classe abstraite est une classe qui ne peut pas être instanciée car certaines de ses méthodes ne sont pas définies. Son but est d'en faire hériter une autre classe pour surcharger ces méthodes. C'est une espèce de modèle de classe. ",-1),n=e("p",null,"Voici comment déclarer une classe abstraite et ses méthodes :",-1),i=l("<h2>Exemple</h2><p>Pour mieux comprendre leur fonctionnement, voici un exemple complet.</p><p> Imaginez un programme permettant de calculer le périmètre et l&#39;aire de plusieurs formes. Toutes ces formes auraient une manière différente de calculer le périmètre et l&#39;aire. Si on veut les rassembler dans un tableau, par exemple, il nous faudrait une classe parente commune, et donc forcément abstraite.<br>Nous allons commencer avec 3 clases : <code>Forme</code>, <code>Rectangle</code> et <code>Cercle</code>. </p><p>La classe abstraite <code>Forme</code> :</p>",4),d=e("p",null,[t("La classe "),e("code",null,"Rectangle"),t(" :")],-1),p=e("p",null,[t("La classe "),e("code",null,"Cercle"),t(" :")],-1),u=e("p",null,"La classe principale :",-1),v={__name:"ClassesAbstraites",setup(m){return(_,f)=>(c(),o("div",null,[r,n,a(s,{file:"/poo/code/classesAbstraites0.java",lang:"java"}),i,a(s,{file:"/poo/code/classesAbstraites1.java",lang:"java"}),d,a(s,{file:"/poo/code/classesAbstraites2.java",lang:"java"}),p,a(s,{file:"/poo/code/classesAbstraites3.java",lang:"java"}),u,a(s,{file:"/poo/code/classesAbstraites4.java",lang:"java"})]))}};export{v as default};

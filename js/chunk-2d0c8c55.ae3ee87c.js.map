{"version":3,"sources":["webpack:///./src/views/bin/Float.vue","webpack:///./src/views/bin/Float.vue?bcf1"],"names":["name","__exports__","render"],"mappings":"8qGAEE,G,gDADD,eA0DM,cAIS,OACdA,KAAM,S,qBC3DR,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD","file":"js/chunk-2d0c8c55.ae3ee87c.js","sourcesContent":["<template>\n\t<div>\n\t\t<h1>Nombres à virgules flottantes</h1>\n\t\t<h3>Convertir un nombre réel en binaire.</h3>\n\t\t<p>Pour la partie entière, garder le même principe. Puis prendre la partie après la virgule.</p>\n\t\t<p>Il faut multiplier le nombre par 2 et si c'est supérieur ou égal à 1, noter 1, sinon noter 0. Puis recommencer en prenant la partie après la virgule :</p>\n\t\t<p>6,625 → 0,625</p>\n\t\t<table class=\"table-responsive\">\n\t\t\t<tr><td>0,625 × 2 = <strong>1</strong>,25&nbsp;</td><td>→ 1</td></tr>\n\t\t\t<tr><td>0,25 × 2 = <strong>0</strong>,5</td><td>→ 0</td></tr>\n\t\t\t<tr><td>0,5 × 2 = <strong>1</strong>,0</td><td>→ 1</td></tr>\n\t\t</table>\n\t\t<p>(Ce lit de haut en bas)</p>\n\t\t<p>Pour être précis à 100%, il faut s'arrêter lorsqu'on obtient 1.0</p>\n\t\t<p>Attention cependant car certains nombres finis en décimal ne le sont pas forcément en binaire et inversement. À vous de voir où vous arrêter.</p>\n\t\t<br>\n\t\t<p>Ici : 6,625<sub>10</sub> = 110,101<sub>2</sub></p>\n\n\t\t<h3>La norme IEEE 754</h3>\n\t\t<p>C'est la norme la plus utilisé pour stocker des nombres à virgules.<br>Elle existe en précision simple (32 bits) et double (64 bits).</p>\n\t\t<p>Elle est constituée comme suit :</p>\n\t\t<img src=\"/medias/bin/ieee754.png\" alt=\"structure de IEEE 754\" class=\"img-fluid\"/>\n\t\t<ul>\n\t\t\t<li>(S)igne :</li>\n\t\t\t<ul>\n\t\t\t\t<li>sur 1 bit</li>\n\t\t\t\t<li>0 si positif, 1 si négatif</li>\n\t\t\t\t<li>plus besoin de faire le complément à 2</li>\n\t\t\t</ul>\n\t\t\t<li>Exposant :</li>\n\t\t\t<ul>\n\t\t\t\t<li>sur 8 bits</li>\n\t\t\t\t<li>127 est défini comme 0</li>\n\t\t\t\t<li>donc 126 = -1 et 128 = 1, etc...</li>\n\t\t\t</ul>\n\t\t\t<li>Mantisse :</li>\n\t\t\t<ul>\n\t\t\t\t<li>sur 23 bits</li>\n\t\t\t\t<li>C'est la valeur numérique du nombre, la virgule se situe avant le premier bit.</li>\n\t\t\t\t<li>une valeur de 1 est supposée avant la virgule mais elle n'est pas transmise car tous les nombres (sauf 0) contiennent au moins un 1.</li>\n\t\t\t</ul>\n\t\t</ul>\n\n\t\t<h3>Calculer le signe</h3>\n\t\t<p>Simplement,<br>Si le nombre est positif : mettre <strong>0</strong><br>Si le nombre est négatif : mettre 1</p>\n\t\t<p>* On n'a plus besoin de faire le complément à 2.</p>\n\n\t\t<h3>Calculer l'exposant</h3>\n\t\t<p>Si on prend le nombre 350,75, cela donne 1 0101 1110,11</p>\n\t\t<p>L'exposant est le nombre de crans dont on doit déplacer la virgule (vers la droite ou vers la gauche) pour arriver au premier 1. Ici, ça fait 8 (1,0101 1110<span style=\"color: red;\">,</span>11)</p>\n\t\t<p>Si on la décale vers la gauche, on additionne, si on décale vers la droite, on soustrait. Le 127 est représenté comme étant 0. Donc ici on va faire 127 + 8 = 135 = <strong>1000 0111</strong></p>\n\n\t\t<h3>Calculer la mantisse</h3>\n\t\t<p>Reprenons 350,75 qui vaut 1 0101 1110,11 en binaire. Pour calculer la mantisse, on va juste enlever la virgule et le premier 1 : 0101 1110 11<br>Puis on complète avec des 0 afin de remplir les 23 bits : <strong>010 1111 0110 0000 0000 0000</strong>. Nous avons notre mantisse.</p>\n\t\t<p>Il ne reste plus qu'à tout appondre : <strong>0100 0011 1010 1111 0110 0000 0000 0000</strong>.</p>\n\n\t\t<h3>Cas particulier : le zéro</h3>\n\t\t<p>Pour écrire 0, on met simplement tous les bits à 0 soit <strong>0000 0000 0000 0000 0000 0000 0000 0000</strong>.</p>\n\t\t<p>* À savoir que 1000 0000 0000 0000 0000 0000 0000 0000 = -0 ce qui revient au même.</p>\n\t</div>\n</template>\n\n<script>\n\texport default {\n\t\tname: 'Float',\n\t}\n</script>\n","import { render } from \"./Float.vue?vue&type=template&id=a24c58f8\"\nimport script from \"./Float.vue?vue&type=script&lang=js\"\nexport * from \"./Float.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/runner/work/epsic.burkhalter.dev/epsic.burkhalter.dev/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/views/html/Hypertexte.vue","webpack:///./src/views/html/Hypertexte.vue?11e1"],"names":["class","href","target","inlineCode","lang","file","name","components","ShowCode","__exports__","render"],"mappings":"2IAEE,eAA8B,UAA1B,yBAAqB,G,iBACtB,yM,EAEH,eAAsB,UAAlB,iBAAa,G,iBACd,iB,iBAA2E,yJ,EAAmJ,eAA8B,YAAxB,qBAAiB,G,iBAAO,8H,GAC1PA,MAAM,iB,gyBAYNA,MAAM,iB,EACX,eAAgM,U,eAA7L,gCAA4B,eAA4B,YAAtB,mB,eAAsB,uI,KAC3D,eAA4E,U,eAAzE,eAAW,eAA0D,KAAvDC,KAAK,wBAAwBC,OAAO,UAAS,Y,oFApB/D,eAqBM,YApBL,EACA,eAAoT,U,EAA5G,eAAwG,GAA9FF,MAAM,gBAAgBG,WAAW,gDAAgDC,KAAK,WAExS,EACA,eAA6X,U,EAA7W,eAA8D,GAApDJ,MAAM,gBAAgBG,WAAW,MAAMC,KAAK,S,EAA2J,E,IACjO,eAAmF,MAAnF,EAAmF,CAAxD,eAAkD,GAAxCC,KAAK,sBAAsBD,KAAK,WACrE,EAWA,eAAgF,MAAhF,EAAgF,CAArD,eAA+C,GAArCC,KAAK,mBAAmBD,KAAK,WAClE,EACA,I,gBAOc,GACdE,KAAM,aACNC,WAAY,CACXC,WAAA,O,qBC1BH,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD","file":"js/chunk-2d0e5f82.10e456b5.js","sourcesContent":["<template>\n\t<div>\n\t\t<h1>Les liens hypertextes</h1>\n\t\t<p>Comme dit dans l'introduction, un site web n'est pas une page, mais un ensemble de pages. Pour naviguer d'une page à l'autre, on utilise des liens hypertextes. Ces liens ce présentent comme ceci : <ShowCode class=\"language-html\" inlineCode='<a href=\"seconde_page.html\">Texte du lien</a>' lang=\"html\"/></p>\n\n\t\t<h2>Les attributs</h2>\n\t\t<p>Cette balise <ShowCode class=\"language-html\" inlineCode=\"<a>\" lang=\"html\"/> nécessite obligatoirement l'attribut href. Un attribut est une sorte de \"paramètre\" que l'on va passer à la balise. Tous les attributs s'écrivent <code>attribut=\"valeur\"</code> et se placent toujours dans la balise ouvrante de l'élément HTML. On peut aussi utiliser plusieurs attributs comme ceci :</p>\n\t\t<pre class=\"language-html\"><ShowCode file=\"html/attribute.html\" lang=\"html\"/></pre>\n\t\t<p>⚠ La valeur est toujours mise entre guillemets même s'il s'agit d'un nombre.</p>\n\n\t\t<h2>L'attribut href</h2>\n\t\t<p>L'attribut href permet de spécifier une autre URL, cette dernière peut être relative ou absolue. C'est vers cette URL que l'utilisateur sera dirigé lorsqu'il cliquera dessus.</p>\n\n\t\t<h2>Relatif vs. absolu</h2>\n\t\t<p>Un chemin relatif cible un fichier depuis l'emplacement actuel tandis qu'un chemin absolu le cible depuis la racine du site.</p>\n\t\t<p>Exemple de chemin relatif : <code class=\"text-secondary\">page.html</code><br>Exemple de chemin absolu : <code class=\"text-secondary\">/page.html</code></p>\n\n\t\t<h2>Site externe</h2>\n\t\t<p>Pour faire un lien vers un site externe, mettre l'URL complète. Par exemple : https://www.google.ch</p>\n\t\t<pre class=\"language-html\"><ShowCode file=\"html/a-href.html\" lang=\"html\"/></pre>\n\t\t<p>Ici, j'ai ajouté l'attribut <code>target=\"_blank\"</code> afin que le navigateur ouvre la page dans un nouvel onglet. Ce qui est une bonne pratique lorsqu'on pointe vers un site externe.</p>\n\t\t<p>Résultat : <a href=\"https://www.google.ch\" target=\"_blank\">Google</a></p>\n\t</div>\n</template>\n\n<script>\n\timport ShowCode from '../../components/ShowCode.vue'\n\n\texport default {\n\t\tname: 'Hypertexte',\n\t\tcomponents: {\n\t\t\tShowCode,\n\t\t},\n\t}\n</script>\n","import { render } from \"./Hypertexte.vue?vue&type=template&id=69b8c81b\"\nimport script from \"./Hypertexte.vue?vue&type=script&lang=js\"\nexport * from \"./Hypertexte.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/runner/work/epsic.burkhalter.dev/epsic.burkhalter.dev/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}
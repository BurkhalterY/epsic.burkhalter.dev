{"version":3,"sources":["webpack:///./src/views/bdd/SqlSelect.vue","webpack:///./src/views/bdd/SqlSelect.vue?52bb"],"names":["class","inlineCode","lang","name","components","ShowCode","__exports__","render"],"mappings":"2IAEE,eAAoD,UAAhD,+CAA2C,G,EAC/C,eAA8J,SAA3J,2JAAuJ,G,EAE1J,eAAe,UAAX,UAAM,G,EACV,eAAmG,SAAhG,gGAA4F,G,GAC1FA,MAAM,gB,EACX,eAA4O,U,eAAzO,uEAAmE,eAAI,qBAAqB,cAAb,Q,eAAa,0DAAsD,eAAI,qBAA2B,cAAnB,c,eAAmB,0D,KAEpL,eAA4C,UAAxC,uCAAmC,G,EACvC,eAAiJ,SAA9I,8IAA0I,G,GACxIA,MAAM,gB,EACX,eAAuG,SAApG,oGAAgG,G,EAEnG,eAA0B,UAAtB,qBAAiB,G,EACrB,eAAmL,U,eAAhL,eAAW,eAAsB,cAAd,S,eAAc,iJ,MAC/BA,MAAM,gB,ixCAkDNA,MAAM,gB,EACX,eAA+L,SAA5L,4LAAwL,G,EAC3L,eAA8J,SAA3J,2JAAuJ,G,EAC1J,eAAgD,SAA7C,6CAAyC,G,GACvCA,MAAM,gB,EACX,eAAsC,SAAnC,mCAA+B,G,GAC7BA,MAAM,gB,EAEX,eAAkC,UAA9B,6BAAyB,G,EAC7B,eAAgH,U,eAA7G,uFAAmF,eAAsB,cAAd,W,KAC9F,eAAgB,SAAb,aAAS,G,GACPA,MAAM,gB,EACX,eAAkC,SAA/B,+BAA2B,G,EAE9B,eAA4B,UAAxB,uBAAmB,G,EACvB,eAA4G,SAAzG,yGAAqG,G,GACnGA,MAAM,gB,EACX,eAA4F,SAAzF,yFAAqF,G,iFAnFzF,eAoFM,YAnFL,EACA,EAEA,EACA,EACA,eAA6F,MAA7F,EAA6F,CAAnE,eAA6D,GAAnDC,WAAW,4BAA4BC,KAAK,UAChF,EAEA,EACA,EACA,eAAuG,MAAvG,EAAuG,CAA7E,eAAuE,GAA7DD,WAAW,sCAAsCC,KAAK,UAC1F,EAEA,EACA,EACA,eAAiH,MAAjH,EAAiH,CAAvF,eAAiF,GAAvED,WAAW,gDAAgDC,KAAK,UACpG,EAiDA,eAA0G,MAA1G,EAA0G,CAAhF,eAA0E,GAAhED,WAAW,yCAAyCC,KAAK,UAC7F,EACA,EACA,EACA,eAA+G,MAA/G,EAA+G,CAArF,eAA+E,GAArED,WAAW,8CAA8CC,KAAK,UAClG,EACA,eAAkH,MAAlH,EAAkH,CAAxF,eAAkF,GAAxED,WAAW,iDAAiDC,KAAK,UAErG,EACA,EACA,EACA,eAAsG,MAAtG,EAAsG,CAA5E,eAAsE,GAA5DD,WAAW,qCAAqCC,KAAK,UACzF,EAEA,EACA,EACA,eAA+I,MAA/I,EAA+I,CAArH,eAA+G,GAArGD,WAAW,8EAA8EC,KAAK,UAClI,I,gBAOc,GACdC,KAAM,YACNC,WAAY,CACXC,WAAA,O,qBCzFH,MAAMC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD","file":"js/chunk-2d0b1e06.0b466dbd.js","sourcesContent":["<template>\n\t<div>\n\t\t<h1>Récupérer des données avec des requêtes SQL</h1>\n\t\t<p>Le SQL est un langage permettant d'interagir avec la base de données. Ici, nous allons l'utiliser pour récupérer des données d'une ou plusieurs tables.</p>\n\n\t\t<h3>SELECT</h3>\n\t\t<p>Pour récupérer des données, nous allons utiliser l'instruction SELECT. En voici un exemple :</p>\n\t\t<pre class=\"language-sql\"><ShowCode inlineCode=\"SELECT * FROM t_personnes\" lang=\"sql\"/></pre>\n\t\t<p>L'étoile (*) signifie que nous voulons tous les champs de la table.<br><strong>FROM</strong> est un mot clé qui précède le nom de la table source.<br><strong>t_personne</strong> est la table source, mettez ici le nom de la table.</p>\n\n\t\t<h3>Ne sélectionner que certains champs</h3>\n\t\t<p>Pour ne prendre que certains champs de t_personnes, on peut remplacer l'étoile (*) par le nom de chacun des champs séparés d'une virgule :</p>\n\t\t<pre class=\"language-sql\"><ShowCode inlineCode=\"SELECT nom, prenom FROM t_personnes\" lang=\"sql\"/></pre>\n\t\t<p>Cette requête renverra uniquement des valeurs pour nom et prenom et ignoreras les autres champs.</p>\n\n\t\t<h3>Ajouter un filtre</h3>\n\t\t<p>Le mot clé <strong>WHERE</strong> permet d'ajouter un filtre à une requête, ne prendre que les enregistrements qui remplissent la condition située après le WHERE. Exemple :</p>\n\t\t<pre class=\"language-sql\"><ShowCode inlineCode=\"SELECT * FROM t_personnes WHERE nom LIKE 'a%'\" lang=\"sql\"/></pre>\n\t\t<p>Ici, l'opérateur est <strong>LIKE</strong>. Voici une liste des principaux opérateurs :</p>\n\t\t<table class=\"table table-responsive\">\n\t\t\t<tr>\n\t\t\t\t<th>Opérateur</th>\n\t\t\t\t<th>Description</th>\n\t\t\t\t<th>Exemple</th>\n\t\t\t\t<th>Description</th>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>=</td>\n\t\t\t\t<td>Strictement égale</td>\n\t\t\t\t<td>WHERE id_pers = 5</td>\n\t\t\t\t<td>Uniquement la personne N°5</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>&lt;</td>\n\t\t\t\t<td>Plus petit</td>\n\t\t\t\t<td>WHERE prix_article &lt; 10</td>\n\t\t\t\t<td>Tous les articles qui coutent moins de 10</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>&lt;=</td>\n\t\t\t\t<td>Plus petit ou égale</td>\n\t\t\t\t<td>WHERE prix_article &lt;= 10</td>\n\t\t\t\t<td>Tous les articles qui coutent moins de 10 ou 10</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>&gt;</td>\n\t\t\t\t<td>Plus grand</td>\n\t\t\t\t<td>WHERE prix_article &gt; 10</td>\n\t\t\t\t<td>Tous les articles qui coutent plus que 10</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>&gt;=</td>\n\t\t\t\t<td>Plus grand ou égale</td>\n\t\t\t\t<td>WHERE prix_article &gt;= 10</td>\n\t\t\t\t<td>Tous les articles qui coutent plus que 10 ou 10</td>\n\t\t\t</tr>\n\t\t\t<tr>\n\t\t\t\t<td>LIKE</td>\n\t\t\t\t<td>Comme</td>\n\t\t\t\t<td>WHERE nom_pers LIKE '%a%'</td>\n\t\t\t\t<td>Toutes les personnes qui ont la lettre \"a\" dans leur nom (% est comme un joker)</td>\n\t\t\t</tr>\n\t\t</table>\n\t\t<p>Il est aussi possible de combiner des conditions avec les opérateurs AND et OR.</p>\n\n\t\t<h3>Trier les enregistrements</h3>\n\t\t<p>Il est possible de trier les enregistrements avec le mot clé <strong>ORDER BY</strong>. Exemple :</p>\n\t\t<pre class=\"language-sql\"><ShowCode inlineCode=\"SELECT * FROM t_personnes ORDER BY nom\" lang=\"sql\"/></pre>\n\t\t<p>Cette requête renvoie les personnes triées par nom. ATTENTION cependant, cela ne tri pas les champs dans la bdd, juste à l'affichage. Un SELECT ne peut pas modifier la base de données.</p>\n\t\t<p>Il est également possible d'ajouter le mot clé DESC pour trier à l'envers ou de trier sur plusieurs champs en les séparant par des virgules. Exemples :</p>\n\t\t<p>Trier dans l'ordre alphabétique inverse :</p>\n\t\t<pre class=\"language-sql\"><ShowCode inlineCode=\"SELECT * FROM t_personnes ORDER BY nom DESC\" lang=\"sql\"/></pre>\n\t\t<p>Trier par nom puis par prénom :</p>\n\t\t<pre class=\"language-sql\"><ShowCode inlineCode=\"SELECT * FROM t_personnes ORDER BY nom, prenom\" lang=\"sql\"/></pre>\n\n\t\t<h3>Limiter le nombre affiché</h3>\n\t\t<p>Il est possible de limiter le nombre d'enregistrements, pour ça ajouter le mot clé <strong>LIMIT</strong></p>\n\t\t<p>Exemple :</p>\n\t\t<pre class=\"language-sql\"><ShowCode inlineCode=\"SELECT * FROM t_personnes LIMIT 20\" lang=\"sql\"/></pre>\n\t\t<p>Affiche 20 enregistrements.</p>\n\n\t\t<h3>Combiner ces règles</h3>\n\t\t<p>Il est bien sûr possible de combiner plusieurs de ces mots clé pour créer une requête plus complexe :</p>\n\t\t<pre class=\"language-sql\"><ShowCode inlineCode=\"SELECT * FROM t_personnes WHERE nom LIKE 'a%' ORDER BY nom, prenom LIMIT 20\" lang=\"sql\"/></pre>\n\t\t<p>Cette requête prend les 20 premières personnes (triées) dont le nom commence par \"a\".</p>\n\t</div>\n</template>\n\n<script>\n\timport ShowCode from '../../components/ShowCode.vue'\n\n\texport default {\n\t\tname: 'SqlSelect',\n\t\tcomponents: {\n\t\t\tShowCode,\n\t\t},\n\t}\n</script>\n","import { render } from \"./SqlSelect.vue?vue&type=template&id=728c6f38\"\nimport script from \"./SqlSelect.vue?vue&type=script&lang=js\"\nexport * from \"./SqlSelect.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/runner/work/epsic.burkhalter.dev/epsic.burkhalter.dev/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}
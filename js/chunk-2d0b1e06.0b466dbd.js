(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0b1e06"],{"225e":function(e,t,n){"use strict";n.r(t);var l=n("7a23"),s=Object(l["g"])("h1",null,"Récupérer des données avec des requêtes SQL",-1),r=Object(l["g"])("p",null,"Le SQL est un langage permettant d'interagir avec la base de données. Ici, nous allons l'utiliser pour récupérer des données d'une ou plusieurs tables.",-1),o=Object(l["g"])("h3",null,"SELECT",-1),u=Object(l["g"])("p",null,"Pour récupérer des données, nous allons utiliser l'instruction SELECT. En voici un exemple :",-1),a={class:"language-sql"},c=Object(l["g"])("p",null,[Object(l["i"])("L'étoile (*) signifie que nous voulons tous les champs de la table."),Object(l["g"])("br"),Object(l["g"])("strong",null,"FROM"),Object(l["i"])(" est un mot clé qui précède le nom de la table source."),Object(l["g"])("br"),Object(l["g"])("strong",null,"t_personne"),Object(l["i"])(" est la table source, mettez ici le nom de la table.")],-1),i=Object(l["g"])("h3",null,"Ne sélectionner que certains champs",-1),p=Object(l["g"])("p",null,"Pour ne prendre que certains champs de t_personnes, on peut remplacer l'étoile (*) par le nom de chacun des champs séparés d'une virgule :",-1),d={class:"language-sql"},g=Object(l["g"])("p",null,"Cette requête renverra uniquement des valeurs pour nom et prenom et ignoreras les autres champs.",-1),b=Object(l["g"])("h3",null,"Ajouter un filtre",-1),m=Object(l["g"])("p",null,[Object(l["i"])("Le mot clé "),Object(l["g"])("strong",null,"WHERE"),Object(l["i"])(" permet d'ajouter un filtre à une requête, ne prendre que les enregistrements qui remplissent la condition située après le WHERE. Exemple :")],-1),O={class:"language-sql"},j=Object(l["h"])('<p>Ici, l&#39;opérateur est <strong>LIKE</strong>. Voici une liste des principaux opérateurs :</p><table class="table table-responsive"><tr><th>Opérateur</th><th>Description</th><th>Exemple</th><th>Description</th></tr><tr><td>=</td><td>Strictement égale</td><td>WHERE id_pers = 5</td><td>Uniquement la personne N°5</td></tr><tr><td>&lt;</td><td>Plus petit</td><td>WHERE prix_article &lt; 10</td><td>Tous les articles qui coutent moins de 10</td></tr><tr><td>&lt;=</td><td>Plus petit ou égale</td><td>WHERE prix_article &lt;= 10</td><td>Tous les articles qui coutent moins de 10 ou 10</td></tr><tr><td>&gt;</td><td>Plus grand</td><td>WHERE prix_article &gt; 10</td><td>Tous les articles qui coutent plus que 10</td></tr><tr><td>&gt;=</td><td>Plus grand ou égale</td><td>WHERE prix_article &gt;= 10</td><td>Tous les articles qui coutent plus que 10 ou 10</td></tr><tr><td>LIKE</td><td>Comme</td><td>WHERE nom_pers LIKE &#39;%a%&#39;</td><td>Toutes les personnes qui ont la lettre &quot;a&quot; dans leur nom (% est comme un joker)</td></tr></table><p>Il est aussi possible de combiner des conditions avec les opérateurs AND et OR.</p><h3>Trier les enregistrements</h3><p>Il est possible de trier les enregistrements avec le mot clé <strong>ORDER BY</strong>. Exemple :</p>',5),E={class:"language-sql"},q=Object(l["g"])("p",null,"Cette requête renvoie les personnes triées par nom. ATTENTION cependant, cela ne tri pas les champs dans la bdd, juste à l'affichage. Un SELECT ne peut pas modifier la base de données.",-1),h=Object(l["g"])("p",null,"Il est également possible d'ajouter le mot clé DESC pour trier à l'envers ou de trier sur plusieurs champs en les séparant par des virgules. Exemples :",-1),R=Object(l["g"])("p",null,"Trier dans l'ordre alphabétique inverse :",-1),C={class:"language-sql"},L=Object(l["g"])("p",null,"Trier par nom puis par prénom :",-1),T={class:"language-sql"},S=Object(l["g"])("h3",null,"Limiter le nombre affiché",-1),I=Object(l["g"])("p",null,[Object(l["i"])("Il est possible de limiter le nombre d'enregistrements, pour ça ajouter le mot clé "),Object(l["g"])("strong",null,"LIMIT")],-1),v=Object(l["g"])("p",null,"Exemple :",-1),_={class:"language-sql"},f=Object(l["g"])("p",null,"Affiche 20 enregistrements.",-1),x=Object(l["g"])("h3",null,"Combiner ces règles",-1),M=Object(l["g"])("p",null,"Il est bien sûr possible de combiner plusieurs de ces mots clé pour créer une requête plus complexe :",-1),D={class:"language-sql"},H=Object(l["g"])("p",null,'Cette requête prend les 20 premières personnes (triées) dont le nom commence par "a".',-1);function W(e,t,n,W,F,w){var P=Object(l["A"])("ShowCode");return Object(l["t"])(),Object(l["f"])("div",null,[s,r,o,u,Object(l["g"])("pre",a,[Object(l["j"])(P,{inlineCode:"SELECT * FROM t_personnes",lang:"sql"})]),c,i,p,Object(l["g"])("pre",d,[Object(l["j"])(P,{inlineCode:"SELECT nom, prenom FROM t_personnes",lang:"sql"})]),g,b,m,Object(l["g"])("pre",O,[Object(l["j"])(P,{inlineCode:"SELECT * FROM t_personnes WHERE nom LIKE 'a%'",lang:"sql"})]),j,Object(l["g"])("pre",E,[Object(l["j"])(P,{inlineCode:"SELECT * FROM t_personnes ORDER BY nom",lang:"sql"})]),q,h,R,Object(l["g"])("pre",C,[Object(l["j"])(P,{inlineCode:"SELECT * FROM t_personnes ORDER BY nom DESC",lang:"sql"})]),L,Object(l["g"])("pre",T,[Object(l["j"])(P,{inlineCode:"SELECT * FROM t_personnes ORDER BY nom, prenom",lang:"sql"})]),S,I,v,Object(l["g"])("pre",_,[Object(l["j"])(P,{inlineCode:"SELECT * FROM t_personnes LIMIT 20",lang:"sql"})]),f,x,M,Object(l["g"])("pre",D,[Object(l["j"])(P,{inlineCode:"SELECT * FROM t_personnes WHERE nom LIKE 'a%' ORDER BY nom, prenom LIMIT 20",lang:"sql"})]),H])}var F=n("02c0"),w={name:"SqlSelect",components:{ShowCode:F["a"]}},P=n("d959"),A=n.n(P);const B=A()(w,[["render",W]]);t["default"]=B}}]);
//# sourceMappingURL=chunk-2d0b1e06.0b466dbd.js.map
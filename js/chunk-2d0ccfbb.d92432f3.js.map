{"version":3,"sources":["webpack:///./src/views/java/Clavier.vue","webpack:///./src/views/java/Clavier.vue?9d0b"],"names":["class","file","lang","inlineCode","name","components","ShowCode","__exports__","render"],"mappings":"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","file":"js/chunk-2d0ccfbb.d92432f3.js","sourcesContent":["<template>\n\t<div>\n\t\t<h1>Lire les entrées clavier</h1>\n\t\t<p>Pour qu'on puisse interagir avec notre programme, le plus simple est d'utiliser le clavier pour écrire.</p>\n\n\t\t<h3>La classe Scanner</h3>\n\t\t<p>Pour cela, il existe la classe Scanner. Elle permet de lire ce qu'on a écrit dans la console.</p>\n\t\t<p>Avant de l'utiliser, il faut l'importer. Placer cela après le package :</p>\n\t\t<pre class=\"language-java\"><ShowCode file=\"java/import-scanner.java\" lang=\"java\"/></pre>\n\t\t<p>Normalement, si vous ne la mettez pas, NetBeans vous proposera de la mettre lui-même quand vous l'utiliserez.</p>\n\n\t\t<h3>Instanciation</h3>\n\t\t<p>Pour l'utiliser, nous devons écrire ceci au début de la fonction main :</p>\n\t\t<pre class=\"language-java\"><ShowCode file=\"java/new-scanner.java\" lang=\"java\"/></pre>\n\t\t<span><strong>Scanner</strong> -&gt; Pour l'instant, imaginez-vous que c'est comme un type de variable : on crée une variable de type Scanner.</span><br>\n\t\t<span><strong>sc</strong> -&gt; Le nom de votre Scanner, appelez-le comme vous souhaitez.</span><br>\n\t\t<span><strong>= new Scanner(System.in)</strong> -&gt; Un truc qui vous semble bizarre pour l'instant. Vous comprendrez immédiatement quand j'aborderais la POO.</span>\n\n\t\t<h3>Utilisation</h3>\n\t\t<p>Lorsque vous écrivez une des fonctions si dessous, le programme ce met en pause et attend que vous entriez quelque chose :</p>\n\t\t<table class=\"table\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th>Fonction</th>\n\t\t\t\t\t<th>Retourne</th>\n\t\t\t\t\t<th>Exemple</th>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>sc.nextByte()</td>\n\t\t\t\t\t<td>byte</td>\n\t\t\t\t\t<td><pre class=\"language-java\"><ShowCode inlineCode=\"byte maVar = sc.nextByte();\" lang=\"java\"/></pre></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>sc.nextShort())</td>\n\t\t\t\t\t<td>short</td>\n\t\t\t\t\t<td><pre class=\"language-java\"><ShowCode inlineCode=\"short maVar = sc.nextShort();\" lang=\"java\"/></pre></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>sc.nextInt()</td>\n\t\t\t\t\t<td>int</td>\n\t\t\t\t\t<td><pre class=\"language-java\"><ShowCode inlineCode=\"int maVar = sc.nextInt();\" lang=\"java\"/></pre></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>sc.nextLong()</td>\n\t\t\t\t\t<td>long</td>\n\t\t\t\t\t<td><pre class=\"language-java\"><ShowCode inlineCode=\"long maVar = sc.nextLong();\" lang=\"java\"/></pre></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>sc.nextFloat()</td>\n\t\t\t\t\t<td>float</td>\n\t\t\t\t\t<td><pre class=\"language-java\"><ShowCode inlineCode=\"float maVar = sc.nextFloat();\" lang=\"java\"/></pre></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>sc.nextDouble()</td>\n\t\t\t\t\t<td>double</td>\n\t\t\t\t\t<td><pre class=\"language-java\"><ShowCode inlineCode=\"double maVar = sc.nextDouble();\" lang=\"java\"/></pre></td>\n\t\t\t\t</tr>\n\t\t\t\t<tr>\n\t\t\t\t\t<td>sc.nextLine()</td>\n\t\t\t\t\t<td>String</td>\n\t\t\t\t\t<td><pre class=\"language-java\"><ShowCode inlineCode=\"String maVar = sc.nextLine();\" lang=\"java\"/></pre></td>\n\t\t\t\t</tr>\n\t\t\t</tbody>\n\t\t</table>\n\t\t<p>Attention donc à ce que pourrait écrire l'utilisateur. Car s'il écrit 3.5 dans un nextInt(), votre programme plantera car on ne peut pas stocker de nombre à virgule dans un int par exemple.</p>\n\n\t\t<h3>Le bloc try catch</h3>\n\t\t<p>Pour pallier à ce problème, nous pouvons utiliser les exceptions. Les exceptions permettent d'exécuter un autre bout de code si le premier plante. Elles se présentent comme suit :</p>\n\t\t<pre class=\"language-java\"><ShowCode file=\"java/try-catch.java\" lang=\"java\"/></pre>\n\t\t<p>En entrant dans le try, le code se déroule normalement. Si le try se passe bien, le catch n'est pas exécuté. Mais si le try plante, alors nous exécutons ce qu'il y a dans le catch. N'utiliser le bloc try catch seulement là où il est nécessaire, inutile de mettre tout votre programme dans un try catch.</p>\n\t\t<p>En paramètre, dans le catch, nous avons NomDeLException. Il s'agit du nom de l'exception. Indiquez ici le nom de l'exception à intercepter.</p>\n\t\t<p>Voici un bout de code qui l'utilise pour empêcher notre utilisateur de noter n'importe quoi :</p>\n\t\t<pre class=\"language-java\"><ShowCode file=\"java/programme-saisie-nombres.java\" lang=\"java\"/></pre>\n\t\t<ul>\n\t\t\t<li>Voyez qu'on a utilisé l'exception : NumberFormatException.</li>\n\t\t\t<li>Integer.parseInt(line) prends en paramètre un texte String et renvoie un int si le String ne contient que des chiffres. Sinon il appelle le bloc catch.</li>\n\t\t</ul>\n\t</div>\n</template>\n\n<script>\n\timport ShowCode from '../../components/ShowCode.vue'\n\n\texport default {\n\t\tname: 'Clavier',\n\t\tcomponents: {\n\t\t\tShowCode,\n\t\t},\n\t}\n</script>\n","import { render } from \"./Clavier.vue?vue&type=template&id=3256a170\"\nimport script from \"./Clavier.vue?vue&type=script&lang=js\"\nexport * from \"./Clavier.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"/home/runner/work/epsic.burkhalter.dev/epsic.burkhalter.dev/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}
(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d22bd83"],{f168:function(e,t,n){"use strict";n.r(t);var l=n("7a23"),a=Object(l["g"])("h1",null,"Les méthodes",-1),r=Object(l["g"])("p",null,"Les méthodes permettent de subdiviser un programme en plusieurs parties et d'éviter la redondance.",-1),o=Object(l["g"])("img",{src:"/medias/java/methodes.png",alt:"methodes"},null,-1),s=Object(l["g"])("br",null,null,-1),u=Object(l["g"])("br",null,null,-1),i=Object(l["g"])("p",null,"Son avantage est qu'elle peut être utiliser plusieurs fois dans le programme. Plus besoin de copier-coller un code, il suffit de le mettre dans une méthode.",-1),d=Object(l["g"])("h3",null,"Déclaration",-1),c=Object(l["g"])("p",null,"Une méthode se déclare comme suit :",-1),g={class:"language-java"},p=Object(l["h"])("<ul><li><strong>public</strong> et <strong>static</strong> : ne vous en préoccuper pas pour l&#39;instant.</li><li><strong>typeRetour</strong> : le type de variable que la méthode retourne, tapez void si elle ne retourne rien.</li><li><strong>nomMethode</strong> : le nom de la méthode, mêmes règles qu&#39;avec les noms de variable.</li><li><strong>typeArg1 arg1</strong> : un ou plusieurs argument(s) et son/leur type, facultatif.</li><li><strong>return x</strong> : Ce que retourne la fonction, ne pas mettre si retourne void.</li></ul><h3>Exemple</h3><p>Le code suivant contient une fonction additionner() qui prend deux paramètres et les additionne.</p>",3),m={class:"language-java"};function j(e,t,n,j,b,v){var h=Object(l["z"])("ShowCode");return Object(l["s"])(),Object(l["f"])("div",null,[a,r,o,s,u,i,d,c,Object(l["g"])("pre",g,[Object(l["j"])(h,{file:"java/methode.java",lang:"java"})]),p,Object(l["g"])("pre",m,[Object(l["j"])(h,{file:"java/additionner.java",lang:"java"})])])}var b=n("02c0"),v={name:"Methodes",components:{ShowCode:b["a"]}},h=n("d959"),O=n.n(h);const f=O()(v,[["render",j]]);t["default"]=f}}]);
//# sourceMappingURL=chunk-2d22bd83.6632f3c3.js.map
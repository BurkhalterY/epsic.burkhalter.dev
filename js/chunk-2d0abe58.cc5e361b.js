(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-2d0abe58"],{"16da":function(t,e,a){"use strict";a.r(e);var l=a("7a23"),r=Object(l["h"])('<h1>Les variables</h1><p>Les variables servent à mémoriser des données dans la RAM, pour pouvoir les réutiliser plus tard.</p><h3>Les types de variables</h3><table class="table"><thead><tr><th>Nom</th><th>Taille</th><th>Remarque</th></tr></thead><tbody><tr><td>boolean</td><td>1 bit</td><td>Deux possibilités : true ou false</td></tr><tr><td>byte</td><td>1 octet</td><td>Entre -128 et 127</td></tr><tr><td>short</td><td>2 octets</td><td>Entre -32768 et 32767</td></tr><tr><td>int</td><td>4 octets</td><td>Entre -2&#39;147&#39;483&#39;648 et 2&#39;147&#39;483&#39;647</td></tr><tr><td>long</td><td>8 octets</td><td>Entre -9&#39;223&#39;372&#39;036&#39;854&#39;775&#39;808 et 9&#39;223&#39;372&#39;036&#39;854&#39;775&#39;807</td></tr><tr><td>float</td><td>4 octets</td><td>Nombre à virgule</td></tr><tr><td>double</td><td>8 octets</td><td>Nombre à virgule avec plus de précision</td></tr><tr><td>char</td><td>2 octets</td><td>Un seul caractère</td></tr><tr><td>String</td><td>Taille variable</td><td>Une chaîne de caractères</td></tr></tbody></table><h3>Utilisation</h3>',5),n={class:"language-java"},i=Object(l["g"])("span",null,[Object(l["g"])("strong",null,"type"),Object(l["i"])(" -> un des types montrés en dessus, choisi en fonction du besoin.")],-1),s=Object(l["g"])("br",null,null,-1),d=Object(l["g"])("span",null,[Object(l["g"])("strong",null,"nomVariable"),Object(l["i"])(" -> Le nom qu'on utilisera après pour faire appelle à notre variable, sans espace ni caractères spéciaux, le plus souvent en "),Object(l["g"])("a",{href:"https://fr.wikipedia.org/wiki/Camel_case",target:"_blank"},"Camel Case"),Object(l["i"])(".")],-1),c=Object(l["g"])("br",null,null,-1),o=Object(l["g"])("span",null,[Object(l["g"])("strong",null,"= 0"),Object(l["i"])(" -> Sert à initialiser directement la variable avec une valeur. C'est facultatif, si on ne le mets pas, la variable vaut null, elle ne peut donc pas être utilisée pour un calcul.")],-1),u=Object(l["g"])("h3",null,"Exemples",-1),b={class:"language-java"},p={class:"language-java"},g=Object(l["g"])("h3",null,"Remarques",-1),j=Object(l["g"])("ul",null,[Object(l["g"])("li",null,"Dans un nombre à virgule, on écrit un point et non pas une virgule. Exemple : 2.5"),Object(l["g"])("li",null,"Pour le type char, on écrit le caractère entre apostrophes. Exemple : 'a'"),Object(l["g"])("li",null,'Pour le type String (attention à la majuscule), on écrit les caractères entre guillemets. Exemple : "Hello world !"')],-1);function v(t,e,a,v,m,h){var O=Object(l["z"])("ShowCode");return Object(l["s"])(),Object(l["f"])("div",null,[r,Object(l["g"])("pre",n,[Object(l["j"])(O,{inlineCode:"type nomVariable = 0;",lang:"java"})]),i,s,d,c,o,u,Object(l["g"])("pre",b,[Object(l["j"])(O,{inlineCode:"int maVariable; //crée une variable avec le nom maVariable\n\t\tmaVariable = 0; //initialise la variable à 0",lang:"java"})]),Object(l["g"])("pre",p,[Object(l["j"])(O,{inlineCode:"int maVariable = 0; //crée et initialise la variable sur la même ligne",lang:"java"})]),g,j])}var m=a("02c0"),h={name:"Variables",components:{ShowCode:m["a"]}},O=a("d959"),f=a.n(O);const w=f()(h,[["render",v]]);e["default"]=w}}]);
//# sourceMappingURL=chunk-2d0abe58.cc5e361b.js.map